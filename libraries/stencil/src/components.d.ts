/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ComponentWithChildren {
    }
    interface ComponentWithChildrenRerender {
        "count": number;
    }
    interface ComponentWithDeclarativeEvent {
        "camelHandled": boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "camel-handled"?: boolean;
        "capsHandled": boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "caps-handled"?: boolean;
        "kebabHandled": boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "kebab-handled"?: boolean;
        "lowercaseHandled": boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "lowercase-handled"?: boolean;
        "pascalHandled": boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "pascal-handled"?: boolean;
    }
    interface ComponentWithDifferentViews {
        "showWC": boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "show-w-c"?: boolean;
        "toggle": () => Promise<void>;
    }
    interface ComponentWithImperativeEvent {
        "eventHandled": boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "event-handled"?: boolean;
    }
    interface ComponentWithProperties {
        "arr": string[];
        "bool": boolean;
        "camelCaseObj": { label: string; };
        "num": number;
        "obj": { org: string; repo: string; };
        "str": string;
    }
    interface ComponentWithoutChildren {
    }
}
declare global {
    interface HTMLComponentWithChildrenElement extends Components.ComponentWithChildren, HTMLStencilElement {
    }
    var HTMLComponentWithChildrenElement: {
        prototype: HTMLComponentWithChildrenElement;
        new (): HTMLComponentWithChildrenElement;
    };
    interface HTMLComponentWithChildrenRerenderElement extends Components.ComponentWithChildrenRerender, HTMLStencilElement {
    }
    var HTMLComponentWithChildrenRerenderElement: {
        prototype: HTMLComponentWithChildrenRerenderElement;
        new (): HTMLComponentWithChildrenRerenderElement;
    };
    interface HTMLComponentWithDeclarativeEventElement extends Components.ComponentWithDeclarativeEvent, HTMLStencilElement {
    }
    var HTMLComponentWithDeclarativeEventElement: {
        prototype: HTMLComponentWithDeclarativeEventElement;
        new (): HTMLComponentWithDeclarativeEventElement;
    };
    interface HTMLComponentWithDifferentViewsElement extends Components.ComponentWithDifferentViews, HTMLStencilElement {
    }
    var HTMLComponentWithDifferentViewsElement: {
        prototype: HTMLComponentWithDifferentViewsElement;
        new (): HTMLComponentWithDifferentViewsElement;
    };
    interface HTMLComponentWithImperativeEventElement extends Components.ComponentWithImperativeEvent, HTMLStencilElement {
    }
    var HTMLComponentWithImperativeEventElement: {
        prototype: HTMLComponentWithImperativeEventElement;
        new (): HTMLComponentWithImperativeEventElement;
    };
    interface HTMLComponentWithPropertiesElement extends Components.ComponentWithProperties, HTMLStencilElement {
    }
    var HTMLComponentWithPropertiesElement: {
        prototype: HTMLComponentWithPropertiesElement;
        new (): HTMLComponentWithPropertiesElement;
    };
    interface HTMLComponentWithoutChildrenElement extends Components.ComponentWithoutChildren, HTMLStencilElement {
    }
    var HTMLComponentWithoutChildrenElement: {
        prototype: HTMLComponentWithoutChildrenElement;
        new (): HTMLComponentWithoutChildrenElement;
    };
    interface HTMLElementTagNameMap {
        "component-with-children": HTMLComponentWithChildrenElement;
        "component-with-children-rerender": HTMLComponentWithChildrenRerenderElement;
        "component-with-declarative-event": HTMLComponentWithDeclarativeEventElement;
        "component-with-different-views": HTMLComponentWithDifferentViewsElement;
        "component-with-imperative-event": HTMLComponentWithImperativeEventElement;
        "component-with-properties": HTMLComponentWithPropertiesElement;
        "component-without-children": HTMLComponentWithoutChildrenElement;
    }
}
declare namespace LocalJSX {
    interface ComponentWithChildren {
    }
    interface ComponentWithChildrenRerender {
        "count"?: number;
    }
    interface ComponentWithDeclarativeEvent {
        "camelHandled"?: boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "camel-handled"?: boolean;
        "capsHandled"?: boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "caps-handled"?: boolean;
        "kebabHandled"?: boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "kebab-handled"?: boolean;
        "lowercaseHandled"?: boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "lowercase-handled"?: boolean;
        "pascalHandled"?: boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "pascal-handled"?: boolean;
    }
    interface ComponentWithDifferentViews {
        "showWC"?: boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "show-w-c"?: boolean;
    }
    interface ComponentWithImperativeEvent {
        "eventHandled"?: boolean;
        /**
         * @deprecated use camelCase instead. Support for dash-casing will be removed in Stencil v5.
         */
        "event-handled"?: boolean;
    }
    interface ComponentWithProperties {
        "arr"?: string[];
        "bool"?: boolean;
        "camelCaseObj"?: { label: string; };
        "num"?: number;
        "obj"?: { org: string; repo: string; };
        "str"?: string;
    }
    interface ComponentWithoutChildren {
    }
    interface IntrinsicElements {
        "component-with-children": ComponentWithChildren;
        "component-with-children-rerender": ComponentWithChildrenRerender;
        "component-with-declarative-event": ComponentWithDeclarativeEvent;
        "component-with-different-views": ComponentWithDifferentViews;
        "component-with-imperative-event": ComponentWithImperativeEvent;
        "component-with-properties": ComponentWithProperties;
        "component-without-children": ComponentWithoutChildren;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "component-with-children": LocalJSX.ComponentWithChildren & JSXBase.HTMLAttributes<HTMLComponentWithChildrenElement>;
            "component-with-children-rerender": LocalJSX.ComponentWithChildrenRerender & JSXBase.HTMLAttributes<HTMLComponentWithChildrenRerenderElement>;
            "component-with-declarative-event": LocalJSX.ComponentWithDeclarativeEvent & JSXBase.HTMLAttributes<HTMLComponentWithDeclarativeEventElement>;
            "component-with-different-views": LocalJSX.ComponentWithDifferentViews & JSXBase.HTMLAttributes<HTMLComponentWithDifferentViewsElement>;
            "component-with-imperative-event": LocalJSX.ComponentWithImperativeEvent & JSXBase.HTMLAttributes<HTMLComponentWithImperativeEventElement>;
            "component-with-properties": LocalJSX.ComponentWithProperties & JSXBase.HTMLAttributes<HTMLComponentWithPropertiesElement>;
            "component-without-children": LocalJSX.ComponentWithoutChildren & JSXBase.HTMLAttributes<HTMLComponentWithoutChildrenElement>;
        }
    }
}
